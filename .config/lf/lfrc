# #@ Basic Settings
set hidden true
set ignorecase true
set icons true
set bat --color=always --theme=base16 "$1"


# set cleaner ~/.config/lf/lf_kitty_clean




#; Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

#; Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}


#; CUSTOM FUNCTIONS 
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}


#; PLUGINS
#, exa
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
    bat $f
}}

#, fzf
cmd fzf_jump ${{
    res="$(fd . $HOME | fzf --reverse --preview --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map f :fzf_jump

#, ripgrep
cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search


# #; WIKI COMMANDS
# #, toggle preview
# cmd toggle_preview %{{
#     if [ "$lf_preview" = "true" ]; then
#         lf -remote "send $id :set preview false; set ratios 1:5"
#     else
#         lf -remote "send $id :set preview true; set ratios 1:2:3"
#     fi
# }}

# map zp toggle_preview



#! MAPPINGS
map au unarchive
map x cut
map <enter> open

map C clear

map gf mkfile
map gg mkdir

map gd cd ~/documents
map gw cd ~/dwnloads
map gp cd ~/pictures



# map <c-space> ${{
#     QL_EXE="C:\Users\divyansh\AppData\Local\Programs\QuickLook\QuickLook.exe"
#     QL_FILE=$(wslpath -w $f)
#     powershell.exe "$QL_EXE $QL_FILE"
# }}

map <c-space> ${{
    QL_FILE=$(wslpath -w $f)
    powershell.exe start "$QL_FILE"
}}



map <esc> quit

map e $$EDITOR $fx

map i shell

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"